/*
===============================================================================
 Name        : Ex_UartRB_FreeRtosv3.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/


#include "header.h"


/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/
xSemaphoreHandle xBinSem_rx;


/**
 * @brief	UART 1 interrupt handler using ring buffers
 * @return	Nothing
 */
void UART1_IRQHandler(void)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	if(Chip_UART_ReadLineStatus(LPC_UART0) & UART_LSR_RDR) {
		xSemaphoreGiveFromISR( xBinSem_rx, &xHigherPriorityTaskWoken );
		Chip_UART_RXIntHandlerRB(LPC_UART0, &rxring);
	}
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );

}

/*-----------------------------------------------------------*/
void vTask_UART1Tx( void *pvParameters )
{
	const char inst1[] = "LPC17xx UART example with FreeRtos\r\n";

	uint8_t data=0;
	/* Send initial messages */
	Board_UARTPutSTR(LPC_UART0,inst1);

	 xSemaphoreTake( xBinSem_rx, 0 );

	for( ;; )
	{
		 xSemaphoreTake( xBinSem_rx, portMAX_DELAY );
		 RingBuffer_Pop(&rxring, &data);
		 Board_UARTPutChar(LPC_UART0,data);
		}

}
/*-----------------------------------------------------------*/
int main( void )
{

	prvSetupHardware();
	//vSemaphoreCreateBinary( xBinSem_tx );
	vSemaphoreCreateBinary( xBinSem_rx );
	/* Check the semaphore was created successfully. */

	if( xBinSem_rx != NULL )
	{

		xTaskCreate( vTask_UART1Tx, "Handler_Uart1tx", configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
					(xTaskHandle *) NULL);

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
	}

	return 0;
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
	/* This function will only be called if an API call to create a task, queue
	or semaphore fails because there is too little heap RAM remaining. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
	/* This function will only be called if a task overflows its stack.  Note
	that stack overflow checking does slow down the context switch
	implementation. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	/* This example does not use the idle hook to perform any processing. */
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
	/* This example does not use the tick hook to perform any processing. */
}
